{"version":3,"sources":["countExercise.js","App.js","reportWebVitals.js","index.js"],"names":["generateRandomNumber","max","Math","floor","random","CountExercise","props","state","firstNumber","secondNumber","userAnswer","correctAnswer","this","align","Typography","variant","component","Button","color","onClick","setState","onSubmit","event","preventDefault","parseInt","alert","placeholder","type","onChange","e","target","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAsDA,SAASA,EAAqBC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAGtBI,M,kDAtDZ,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,YAAaR,EAAqB,KAAMS,aAAcT,EAAqB,KAAMU,WAAW,EAAGC,eAAgB,GAF9G,E,0CAKnB,WAAU,IAAD,OAcL,OAAKC,KAAKL,MAAMI,cAmBT,mCACH,sBAAKE,MAAM,SAAX,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,6BACoB,uBADpB,4BAIA,cAACC,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,QAAS,WArCzD,EAAKC,SAAS,CAACZ,YAAaR,EAAqB,KAAMS,aAAcT,EAAqB,KAAMU,WAAW,EAAGC,eAAgB,KAqC1H,4BAxBG,mCACH,sBAAKE,MAAM,SAAX,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,gDACuC,uBADvC,gEAEI,uBAAMH,KAAKL,MAAMC,YAFrB,MAEqCI,KAAKL,MAAME,aAFhD,SAIA,uBAAMY,SAhBa,SAACC,GAC5BA,EAAMC,iBACD,EAAKhB,MAAMC,YAAc,EAAKD,MAAME,eAAkBe,SAAS,EAAKjB,MAAMG,YAC3E,EAAKU,SAAS,CAACT,eAAgB,IAE/Bc,MAAM,wCAWF,UACQ,uBACIC,YAAa,oBACbC,KAAK,SACLC,SAAU,SAACC,GAAD,OAAO,EAAKT,SAAS,CAACV,WAAamB,EAAEC,OAAOC,WAE9D,uBAAOJ,KAAK,SAASI,MAAM,8B,GAjCvBC,IAAMC,WCGnBC,MAJf,WACE,OAAO,IAAI7B,GCSE8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.080fcaa2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from '@material-ui/core/Button';\r\nclass CountExercise extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {firstNumber: generateRandomNumber(100), secondNumber: generateRandomNumber(100), userAnswer:0, correctAnswer : false};\r\n    }\r\n\r\n    render() {\r\n        const resetState = () => {\r\n            this.setState({firstNumber: generateRandomNumber(100), secondNumber: generateRandomNumber(100), userAnswer:0, correctAnswer : false});\r\n        };\r\n\r\n        const handleUserAnswerSubmit = (event) => {\r\n            event.preventDefault();\r\n            if ((this.state.firstNumber + this.state.secondNumber) === parseInt(this.state.userAnswer)){\r\n                this.setState({correctAnswer : true});\r\n            }else {\r\n                alert(\"Your answer is incorrect, try again\");\r\n            }\r\n        };\r\n\r\n        if (!this.state.correctAnswer){\r\n            return <>\r\n                <div align=\"center\" >\r\n                    <Typography variant=\"h3\" >\r\n                        Welcome to SOWISO counting exercise<br/>In this exercise you have to calculate the sum of two numbers\r\n                        <br/>{this.state.firstNumber} + {this.state.secondNumber}  =\r\n                    </Typography>\r\n                    <form onSubmit={handleUserAnswerSubmit} >\r\n                            <input\r\n                                placeholder={\"Enter your answer\"}\r\n                                type=\"number\"\r\n                                onChange={(e) => this.setState({userAnswer : e.target.value})}\r\n                            />\r\n                        <input type=\"submit\" value=\"Submit answer\"/>\r\n                    </form>\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        return <>\r\n            <div align=\"center\">\r\n                <Typography variant=\"h3\" component=\"div\">\r\n                    Congratulations!<br/>\r\n                    Your answer is correct\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => resetState()}>Try again</Button>\r\n            </div>\r\n            </>\r\n\r\n    }\r\n}\r\nfunction generateRandomNumber(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport default (CountExercise)\r\n","import './App.css';\nimport CountExercise from \"./countExercise\";\nfunction App() {\n  return new CountExercise()\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}